{"ast":null,"code":"async function fetchLogin(pUserName, pPassword) {\n  // Simple POST request with a JSON body using fetch\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name: pUserName,\n      password: pPassword\n    })\n  };\n  alert(\"sending \" + requestOptions.body);\n  const res = await fetch('http://localhost:3001/login', requestOptions);\n  return res;\n}\n\nexport async function login({\n  username,\n  password\n}) {\n  return new Promise((resolve, reject) => {\n    fetchLogin(username, password).then(res => res.json()).then(data => {\n      alert(\"DATA IS\" + data); // JSON data parsed by `data.json()` call\n\n      let resultObj = JSON.parse(data)[0];\n      if (resultObj.Result != 1) reject();else resolve();\n    });\n  });\n}\n\nasync function submitComment(pUserName, pComment) {\n  // Simple POST request with a JSON body using fetch\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name: pUserName,\n      comment: pComment\n    })\n  };\n  alert(\"sending \" + pComment + \": \" + requestOptions.body);\n  const res = await fetch('http://localhost:3001/comment', requestOptions);\n  return res;\n}\n\nexport async function storeComment(username, pcomment) {\n  alert('COmment is ' + pcomment);\n  return new Promise((resolve, reject) => {\n    submitComment(username, pcomment).then(res => res.json()).then(data => {\n      alert(\"DATA IS\" + data); // JSON data parsed by `data.json()` call\n\n      let resultObj = JSON.parse(data)[0];\n      if (resultObj.Result != 'Stored a commnet') reject();else resolve();\n    });\n  });\n}","map":{"version":3,"sources":["/Users/destinnielaila/M1/CLIENT/src/Components/utils.js"],"names":["fetchLogin","pUserName","pPassword","requestOptions","method","headers","body","JSON","stringify","name","password","alert","res","fetch","login","username","Promise","resolve","reject","then","json","data","resultObj","parse","Result","submitComment","pComment","comment","storeComment","pcomment"],"mappings":"AACA,eAAeA,UAAf,CAA0BC,SAA1B,EAAqCC,SAArC,EAA+C;AAE3C;AACA,QAAMC,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFU;AAGnBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,MAAAA,IAAI,EAAER,SAAR;AAAmBS,MAAAA,QAAQ,EAAGR;AAA9B,KAAf;AAHa,GAAvB;AAOAS,EAAAA,KAAK,CAAC,aAAaR,cAAc,CAACG,IAA7B,CAAL;AACA,QAAMM,GAAG,GAAG,MAAMC,KAAK,CAAC,6BAAD,EAAgCV,cAAhC,CAAvB;AACA,SAAOS,GAAP;AACH;;AAED,OAAO,eAAeE,KAAf,CAAqB;AAAEC,EAAAA,QAAF;AAAYL,EAAAA;AAAZ,CAArB,EAA6C;AAClD,SAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtClB,IAAAA,UAAU,CAACe,QAAD,EAAUL,QAAV,CAAV,CACCS,IADD,CACOP,GAAG,IAAIA,GAAG,CAACQ,IAAJ,EADd,EAECD,IAFD,CAEME,IAAI,IAAI;AACZV,MAAAA,KAAK,CAAC,YAAUU,IAAX,CAAL,CADY,CACW;;AACvB,UAAIC,SAAS,GAAIf,IAAI,CAACgB,KAAL,CAAWF,IAAX,CAAD,CAAmB,CAAnB,CAAhB;AACA,UAAGC,SAAS,CAACE,MAAV,IAAoB,CAAvB,EACIN,MAAM,GADV,KAGID,OAAO;AACZ,KATD;AAWD,GAZM,CAAP;AAaD;;AAED,eAAeQ,aAAf,CAA6BxB,SAA7B,EAAwCyB,QAAxC,EAAiD;AAE/C;AACA,QAAMvB,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFU;AAGnBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,MAAAA,IAAI,EAAER,SAAR;AAAmB0B,MAAAA,OAAO,EAAED;AAA5B,KAAf;AAHa,GAAvB;AAOAf,EAAAA,KAAK,CAAC,aAAae,QAAb,GAAwB,IAAxB,GAA+BvB,cAAc,CAACG,IAA/C,CAAL;AACA,QAAMM,GAAG,GAAG,MAAMC,KAAK,CAAC,+BAAD,EAAkCV,cAAlC,CAAvB;AACA,SAAOS,GAAP;AACD;;AAED,OAAO,eAAegB,YAAf,CAA4Bb,QAA5B,EAAsCc,QAAtC,EAAiD;AACtDlB,EAAAA,KAAK,CAAC,gBAAekB,QAAhB,CAAL;AACF,SAAO,IAAIb,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCO,IAAAA,aAAa,CAACV,QAAD,EAAUc,QAAV,CAAb,CACCV,IADD,CACOP,GAAG,IAAIA,GAAG,CAACQ,IAAJ,EADd,EAECD,IAFD,CAEME,IAAI,IAAI;AACZV,MAAAA,KAAK,CAAC,YAAUU,IAAX,CAAL,CADY,CACW;;AACvB,UAAIC,SAAS,GAAIf,IAAI,CAACgB,KAAL,CAAWF,IAAX,CAAD,CAAmB,CAAnB,CAAhB;AACA,UAAGC,SAAS,CAACE,MAAV,IAAoB,kBAAvB,EACIN,MAAM,GADV,KAGID,OAAO;AACZ,KATD;AAWD,GAZM,CAAP;AAaC","sourcesContent":["\r\nasync function fetchLogin(pUserName, pPassword){\r\n \r\n    // Simple POST request with a JSON body using fetch\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ name: pUserName, password : pPassword })\r\n        \r\n       \r\n    };\r\n    alert(\"sending \" + requestOptions.body);\r\n    const res = await fetch('http://localhost:3001/login', requestOptions);\r\n    return res;\r\n}\r\n\r\nexport async function login({ username, password }) {\r\n  return new Promise((resolve, reject) => {\r\n    fetchLogin(username,password)\r\n    .then( res => res.json())\r\n    .then(data => {\r\n      alert(\"DATA IS\"+data); // JSON data parsed by `data.json()` call\r\n      let resultObj = (JSON.parse(data))[0];\r\n      if(resultObj.Result != 1 )\r\n          reject();\r\n      else \r\n          resolve();\r\n    })\r\n    ; \r\n  });\r\n}\r\n\r\nasync function submitComment(pUserName, pComment){\r\n \r\n  // Simple POST request with a JSON body using fetch\r\n  const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ name: pUserName, comment: pComment})\r\n      \r\n     \r\n  };\r\n  alert(\"sending \" + pComment + \": \" + requestOptions.body);\r\n  const res = await fetch('http://localhost:3001/comment', requestOptions);\r\n  return res;\r\n}\r\n\r\nexport async function storeComment(username, pcomment ) {\r\n  alert('COmment is '+ pcomment);\r\nreturn new Promise((resolve, reject) => {\r\n  submitComment(username,pcomment)\r\n  .then( res => res.json())\r\n  .then(data => {\r\n    alert(\"DATA IS\"+data); // JSON data parsed by `data.json()` call\r\n    let resultObj = (JSON.parse(data))[0];\r\n    if(resultObj.Result != 'Stored a commnet' )\r\n        reject();\r\n    else \r\n        resolve();\r\n  })\r\n  ; \r\n});\r\n}\r\n"]},"metadata":{},"sourceType":"module"}