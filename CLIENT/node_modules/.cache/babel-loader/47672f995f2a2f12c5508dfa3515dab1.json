{"ast":null,"code":"var _jsxFileName = \"/Users/destinnielaila/M1/CLIENT/src/Views/LoginContext.jsx\";\nimport React, { useContext } from \"react\";\nimport { useImmerReducer } from \"use-immer\";\nimport { login, storeComment } from \"../Components/utils\";\nimport Container from \"react-bootstrap/Container\"; // import { ExampleComponent } from './ExampleStyle';\n\nfunction loginReducer(draft, action) {\n  switch (action.type) {\n    case \"field\":\n      {\n        draft[action.fieldName] = action.payload;\n        return;\n      }\n\n    case \"login\":\n      {\n        draft.error = \"\";\n        draft.isLoading = true;\n        return;\n      }\n\n    case \"success\":\n      {\n        draft.isLoggedIn = true;\n        draft.isLoading = false; //draft.username = '';\n\n        draft.password = \"\";\n        return;\n      }\n\n    case \"error\":\n      {\n        draft.error = \"Incorrect username or password!\";\n        draft.isLoggedIn = false;\n        draft.isLoading = false;\n        draft.username = \"\";\n        draft.password = \"\";\n        return;\n      }\n\n    case \"logOut\":\n      {\n        draft.isLoggedIn = false;\n        return;\n      }\n\n    case \"comment\":\n      {\n        draft.error = \"\";\n        draft.isLoading = true;\n        return;\n      }\n\n    default:\n      return;\n  }\n}\n\nconst todos = [{\n  title: \"Here Are Comments\" // completed: true,\n\n}];\nconst initialState = {\n  username: \"\",\n  password: \"\",\n  isLoading: false,\n  error: \"\",\n  isLoggedIn: false,\n  todos\n}; // ==== UseContext ReactHooks\n\nconst StateContext = React.createContext();\nconst DispatchContext = React.createContext();\nexport default function LoginUseContext() {\n  const [state, dispatch] = useImmerReducer(loginReducer, initialState);\n  const {\n    username,\n    password,\n    isLoading,\n    error,\n    isLoggedIn,\n    todos\n  } = state;\n\n  const onSubmit = async e => {\n    e.preventDefault();\n    dispatch({\n      type: \"login\"\n    });\n\n    try {\n      await login({\n        username,\n        password\n      }); // <<< HERE WE CONNECT UP TO THE API CALL IN util.js\n\n      dispatch({\n        type: \"success\"\n      });\n    } catch (error) {\n      dispatch({\n        type: \"error\"\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DispatchContext.Provider, {\n    value: dispatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(StateContext.Provider, {\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    className: \"alignForm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-login-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }\n  }, isLoggedIn ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  }, \"Welcome \", username, \"!\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => dispatch({\n      type: \"logOut\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }, \"Log Out\"), /*#__PURE__*/React.createElement(TodoPage, {\n    todos: todos,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  })) : /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 19\n    }\n  }, \" \", error && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 31\n    }\n  }, error), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"floatRight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }\n  }, \"Please Login!\"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"floatRight\",\n    type: \"text\",\n    placeholder: \"username\",\n    value: username,\n    onChange: e => dispatch({\n      type: \"field\",\n      fieldName: \"username\",\n      payload: e.currentTarget.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"floatRight\",\n    type: \"password\",\n    placeholder: \"password\",\n    autoComplete: \"new-password\",\n    value: password,\n    onChange: e => dispatch({\n      type: \"field\",\n      fieldName: \"password\",\n      payload: e.currentTarget.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"submit\",\n    className: \"CentreButton\",\n    type: \"submit\",\n    disabled: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 21\n    }\n  }, isLoading ? \"Logging in...\" : \"Log In\"), \"\"))))));\n} // ======== Comments Stuff\n\nfunction TodoPage({\n  todos\n}) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"todoContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"aboutTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }, \"Comments\"), todos.map(item => /*#__PURE__*/React.createElement(TodoItem, Object.assign({\n    key: item.title\n  }, item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }))));\n} // Changed TodoItem as I did not need the items I was only after comments and username\n\n\nfunction TodoItem() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n  const {\n    username,\n    comment,\n    error\n  } = state;\n\n  const onSubmitComment = async e => {\n    e.preventDefault();\n    dispatch({\n      type: \"comment\"\n    }); // This code renders once a submit event takes place it is calling the api\n\n    try {\n      alert(\"Calling api to store the comment , your commment is\" + comment);\n      await storeComment(username, comment); // <<< HERE WE CONNECT UP TO THE API CALL IN util.js\n\n      dispatch({\n        type: \"success\"\n      });\n    } catch (error) {\n      dispatch({\n        type: \"error\"\n      });\n    }\n  }; // Made changes to the comments section to be able to\n\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"form\",\n    onSubmit: onSubmitComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }\n  }, \" \", error && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 19\n    }\n  }, error), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }\n  }, \"Enter Comment\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"comment\",\n    value: comment,\n    onChange: e => dispatch({\n      type: \"field\",\n      fieldName: \"comment\",\n      payload: e.currentTarget.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"submit\",\n    type: \"comment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }\n  }, comment ? \"Saving...\" : \"Save\")));\n}","map":{"version":3,"sources":["/Users/destinnielaila/M1/CLIENT/src/Views/LoginContext.jsx"],"names":["React","useContext","useImmerReducer","login","storeComment","Container","loginReducer","draft","action","type","fieldName","payload","error","isLoading","isLoggedIn","password","username","todos","title","initialState","StateContext","createContext","DispatchContext","LoginUseContext","state","dispatch","onSubmit","e","preventDefault","currentTarget","value","TodoPage","map","item","TodoItem","comment","onSubmitComment","alert"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport { useImmerReducer } from \"use-immer\";\nimport { login, storeComment } from \"../Components/utils\";\nimport Container from \"react-bootstrap/Container\";\n// import { ExampleComponent } from './ExampleStyle';\n\nfunction loginReducer(draft, action) {\n  switch (action.type) {\n    case \"field\": {\n      draft[action.fieldName] = action.payload;\n      return;\n    }\n    case \"login\": {\n      draft.error = \"\";\n      draft.isLoading = true;\n      return;\n    }\n    case \"success\": {\n      draft.isLoggedIn = true;\n      draft.isLoading = false;\n      //draft.username = '';\n      draft.password = \"\";\n      return;\n    }\n    case \"error\": {\n      draft.error = \"Incorrect username or password!\";\n      draft.isLoggedIn = false;\n      draft.isLoading = false;\n      draft.username = \"\";\n      draft.password = \"\";\n      return;\n    }\n    case \"logOut\": {\n      draft.isLoggedIn = false;\n      return;\n    }\n\n    case \"comment\": {\n      draft.error = \"\";\n      draft.isLoading = true;\n      return;\n    }\n\n    default:\n      return;\n  }\n}\n\nconst todos = [\n  {\n    title: \"Here Are Comments\"\n    // completed: true,\n  }\n];\n\nconst initialState = {\n  username: \"\",\n  password: \"\",\n  isLoading: false,\n  error: \"\",\n  isLoggedIn: false,\n  todos\n};\n// ==== UseContext ReactHooks\nconst StateContext = React.createContext();\nconst DispatchContext = React.createContext();\n\nexport default function LoginUseContext() {\n  const [state, dispatch] = useImmerReducer(loginReducer, initialState);\n  const { username, password, isLoading, error, isLoggedIn, todos } = state;\n\n  const onSubmit = async e => {\n    e.preventDefault();\n\n    dispatch({ type: \"login\" });\n\n    try {\n      await login({ username, password }); // <<< HERE WE CONNECT UP TO THE API CALL IN util.js\n      dispatch({ type: \"success\" });\n    } catch (error) {\n      dispatch({ type: \"error\" });\n    }\n  };\n\n  return (\n    <div>\n      <DispatchContext.Provider value={dispatch}>\n        <StateContext.Provider value={state}>\n        \n            <Container className=\"alignForm\">\n              <div className=\"container-login-2\">\n                {isLoggedIn ? (\n                  <>\n                    <h1>Welcome {username}!</h1>\n                    <button onClick={() => dispatch({ type: \"logOut\" })}>\n                      Log Out\n                    </button>\n\n\n                    <TodoPage todos={todos} />\n                  </>\n                ) : (\n                  <form  onSubmit={onSubmit}>\n                    {\" \"}\n                    {/* HERE THE onSubmit is set up !!*/}\n                    {error && <p className=\"error\">{error}</p>}\n                    <p className=\"floatRight\">Please Login!</p>\n                    <input\n                    className=\"floatRight\"\n                      type=\"text\"\n                      placeholder=\"username\"\n                      value={username}\n                      onChange={e =>\n                        dispatch({\n                          type: \"field\",\n                          fieldName: \"username\",\n                          payload: e.currentTarget.value\n                        })\n                      }\n                    />\n                    <input\n                    className=\"floatRight\"\n                      type=\"password\"\n                      placeholder=\"password\"\n                      autoComplete=\"new-password\"\n                      value={password}\n                      onChange={e =>\n                        dispatch({\n                          type: \"field\",\n                          fieldName: \"password\",\n                          payload: e.currentTarget.value\n                        })\n                      }\n                    />\n                    {/* /* When button is clicked the function is disabled and shows Loging in */}\n                    <button \n                     \n                      className=\"submit\"\n                      className=\"CentreButton\"\n                      type=\"submit\"\n                      disabled={isLoading}\n                    >\n                      {isLoading ? \"Logging in...\" : \"Log In\"}\n                    </button>{\"\"}\n                  </form>\n                )}\n              </div>\n            </Container>\n          {/* </div> */}\n        </StateContext.Provider>\n      </DispatchContext.Provider>\n    </div>\n  );\n}\n\n// ======== Comments Stuff\nfunction TodoPage({ todos }) {\n  return (\n    <div className=\"todoContainer\">\n      <h2 className=\"aboutTitle\">Comments</h2>\n      {todos.map(item => (\n        <TodoItem key={item.title} {...item} />\n      ))}\n    </div>\n  );\n}\n\n// Changed TodoItem as I did not need the items I was only after comments and username\nfunction TodoItem() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n  const { username, comment, error } = state;\n\n  const onSubmitComment = async e => {\n    e.preventDefault();\n\n    dispatch({ type: \"comment\" });\n    // This code renders once a submit event takes place it is calling the api\n    try {\n      alert(\"Calling api to store the comment , your commment is\" + comment);\n      await storeComment(username, comment); // <<< HERE WE CONNECT UP TO THE API CALL IN util.js\n      dispatch({ type: \"success\" });\n    } catch (error) {\n      dispatch({ type: \"error\" });\n    }\n  };\n\n  // Made changes to the comments section to be able to\n  return (\n    <Container>\n      <form className=\"form\" onSubmit={onSubmitComment}>\n        {\" \"}\n        {/* HERE THE onSubmiComment is set up !!*/}\n        {error && <p className=\"error\">{error}</p>}\n        <p>Enter Comment</p>\n        <input\n          type=\"text\"\n          placeholder=\"comment\"\n          value={comment}\n          onChange={e =>\n            dispatch({\n              type: \"field\",\n              fieldName: \"comment\",\n              payload: e.currentTarget.value\n            })\n          }\n        />\n        <button className=\"submit\" type=\"comment\">\n          {comment ? \"Saving...\" : \"Save\"}\n        </button>\n      </form>\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}